const M=Math.PI,y=2*M,p=1e-6,E=y-p;function m(n){this._+=n[0];for(let t=1,h=n.length;t<h;++t)this._+=arguments[t]+n[t]}function T(n){let t=Math.floor(n);if(!(t>=0))throw new Error(`invalid digits: ${n}`);if(t>15)return m;const h=10**t;return function(i){this._+=i[0];for(let s=1,e=i.length;s<e;++s)this._+=Math.round(arguments[s]*h)/h+i[s]}}class L{constructor(t){this._x0=this._y0=this._x1=this._y1=null,this._="",this._append=t==null?m:T(t)}moveTo(t,h){this._append`M${this._x0=this._x1=+t},${this._y0=this._y1=+h}`}closePath(){this._x1!==null&&(this._x1=this._x0,this._y1=this._y0,this._append`Z`)}lineTo(t,h){this._append`L${this._x1=+t},${this._y1=+h}`}quadraticCurveTo(t,h,i,s){this._append`Q${+t},${+h},${this._x1=+i},${this._y1=+s}`}bezierCurveTo(t,h,i,s,e,$){this._append`C${+t},${+h},${+i},${+s},${this._x1=+e},${this._y1=+$}`}arcTo(t,h,i,s,e){if(t=+t,h=+h,i=+i,s=+s,e=+e,e<0)throw new Error(`negative radius: ${e}`);let $=this._x1,u=this._y1,r=i-t,o=s-h,a=$-t,l=u-h,_=a*a+l*l;if(this._x1===null)this._append`M${this._x1=t},${this._y1=h}`;else if(_>p)if(!(Math.abs(l*r-o*a)>p)||!e)this._append`L${this._x1=t},${this._y1=h}`;else{let f=i-$,d=s-u,x=r*r+o*o,A=f*f+d*d,g=Math.sqrt(x),v=Math.sqrt(_),w=e*Math.tan((M-Math.acos((x+_-A)/(2*g*v)))/2),c=w/v,b=w/g;Math.abs(c-1)>p&&this._append`L${t+c*a},${h+c*l}`,this._append`A${e},${e},0,0,${+(l*f>a*d)},${this._x1=t+b*r},${this._y1=h+b*o}`}}arc(t,h,i,s,e,$){if(t=+t,h=+h,i=+i,$=!!$,i<0)throw new Error(`negative radius: ${i}`);let u=i*Math.cos(s),r=i*Math.sin(s),o=t+u,a=h+r,l=1^$,_=$?s-e:e-s;this._x1===null?this._append`M${o},${a}`:(Math.abs(this._x1-o)>p||Math.abs(this._y1-a)>p)&&this._append`L${o},${a}`,i&&(_<0&&(_=_%y+y),_>E?this._append`A${i},${i},0,1,${l},${t-u},${h-r}A${i},${i},0,1,${l},${this._x1=o},${this._y1=a}`:_>p&&this._append`A${i},${i},0,${+(_>=M)},${l},${this._x1=t+i*Math.cos(e)},${this._y1=h+i*Math.sin(e)}`)}rect(t,h,i,s){this._append`M${this._x0=this._x1=+t},${this._y0=this._y1=+h}h${i=+i}v${+s}h${-i}Z`}toString(){return this._}}function P(n){return function(){return n}}function q(n){let t=3;return n.digits=function(h){if(!arguments.length)return t;if(h==null)t=null;else{const i=Math.floor(h);if(!(i>=0))throw new RangeError(`invalid digits: ${h}`);t=i}return n},()=>new L(t)}function C(n){return typeof n=="object"&&"length"in n?n:Array.from(n)}export{C as a,P as c,q as w};
