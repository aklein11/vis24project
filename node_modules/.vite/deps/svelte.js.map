{
  "version": 3,
  "sources": ["../../svelte/src/main/main-client.js"],
  "sourcesContent": ["import { current_component_context, untrack } from '../internal/client/runtime.js';\nimport { is_array } from '../internal/client/utils.js';\nimport { user_effect } from '../internal/index.js';\n\n/**\n * The `onMount` function schedules a callback to run as soon as the component has been mounted to the DOM.\n * It must be called during the component's initialisation (but doesn't need to live *inside* the component;\n * it can be called from an external module).\n *\n * If a function is returned _synchronously_ from `onMount`, it will be called when the component is unmounted.\n *\n * `onMount` does not run inside a [server-side component](https://svelte.dev/docs#run-time-server-side-component-api).\n *\n * https://svelte.dev/docs/svelte#onmount\n * @template T\n * @param {() => import('./private.js').NotFunction<T> | Promise<import('./private.js').NotFunction<T>> | (() => any)} fn\n * @returns {void}\n */\nexport function onMount(fn) {\n\tif (current_component_context === null) {\n\t\tthrow new Error('onMount can only be used during component initialisation.');\n\t}\n\n\tif (current_component_context.r) {\n\t\tuser_effect(() => {\n\t\t\tconst cleanup = untrack(fn);\n\t\t\tif (typeof cleanup === 'function') return /** @type {() => void} */ (cleanup);\n\t\t});\n\t} else {\n\t\tinit_update_callbacks(current_component_context).m.push(fn);\n\t}\n}\n\n/**\n * Schedules a callback to run immediately before the component is unmounted.\n *\n * Out of `onMount`, `beforeUpdate`, `afterUpdate` and `onDestroy`, this is the\n * only one that runs inside a server-side component.\n *\n * https://svelte.dev/docs/svelte#ondestroy\n * @param {() => any} fn\n * @returns {void}\n */\nexport function onDestroy(fn) {\n\tif (current_component_context === null) {\n\t\tthrow new Error('onDestroy can only be used during component initialisation.');\n\t}\n\n\tonMount(() => () => untrack(fn));\n}\n\n/**\n * @template [T=any]\n * @param {string} type\n * @param {T} [detail]\n * @param {any}params_0\n * @returns {CustomEvent<T>}\n */\nfunction create_custom_event(type, detail, { bubbles = false, cancelable = false } = {}) {\n\treturn new CustomEvent(type, { detail, bubbles, cancelable });\n}\n\n/**\n * Creates an event dispatcher that can be used to dispatch [component events](https://svelte.dev/docs#template-syntax-component-directives-on-eventname).\n * Event dispatchers are functions that can take two arguments: `name` and `detail`.\n *\n * Component events created with `createEventDispatcher` create a\n * [CustomEvent](https://developer.mozilla.org/en-US/docs/Web/API/CustomEvent).\n * These events do not [bubble](https://developer.mozilla.org/en-US/docs/Learn/JavaScript/Building_blocks/Events#Event_bubbling_and_capture).\n * The `detail` argument corresponds to the [CustomEvent.detail](https://developer.mozilla.org/en-US/docs/Web/API/CustomEvent/detail)\n * property and can contain any type of data.\n *\n * The event dispatcher can be typed to narrow the allowed event names and the type of the `detail` argument:\n * ```ts\n * const dispatch = createEventDispatcher<{\n *  loaded: never; // does not take a detail argument\n *  change: string; // takes a detail argument of type string, which is required\n *  optional: number | null; // takes an optional detail argument of type number\n * }>();\n * ```\n *\n * https://svelte.dev/docs/svelte#createeventdispatcher\n * @template {Record<string, any>} [EventMap = any]\n * @returns {import('./public.js').EventDispatcher<EventMap>}\n */\nexport function createEventDispatcher() {\n\tconst component_context = current_component_context;\n\tif (component_context === null) {\n\t\tthrow new Error('createEventDispatcher can only be used during component initialisation.');\n\t}\n\n\treturn (type, detail, options) => {\n\t\tconst events = /** @type {Record<string, Function | Function[]>} */ (\n\t\t\tcomponent_context.s.$$events\n\t\t)?.[/** @type {any} */ (type)];\n\n\t\tif (events) {\n\t\t\tconst callbacks = is_array(events) ? events.slice() : [events];\n\t\t\t// TODO are there situations where events could be dispatched\n\t\t\t// in a server (non-DOM) environment?\n\t\t\tconst event = create_custom_event(/** @type {string} */ (type), detail, options);\n\t\t\tfor (const fn of callbacks) {\n\t\t\t\tfn.call(component_context.x, event);\n\t\t\t}\n\t\t\treturn !event.defaultPrevented;\n\t\t}\n\n\t\treturn true;\n\t};\n}\n\n// TODO mark beforeUpdate and afterUpdate as deprecated in Svelte 6\n\n/**\n * Schedules a callback to run immediately before the component is updated after any state change.\n *\n * The first time the callback runs will be before the initial `onMount`.\n *\n * In runes mode use `$effect.pre` instead.\n *\n * https://svelte.dev/docs/svelte#beforeupdate\n * @deprecated Use `$effect.pre` instead — see https://svelte-5-preview.vercel.app/docs/deprecations#beforeupdate-and-afterupdate\n * @param {() => void} fn\n * @returns {void}\n */\nexport function beforeUpdate(fn) {\n\tif (current_component_context === null) {\n\t\tthrow new Error('beforeUpdate can only be used during component initialisation');\n\t}\n\n\tif (current_component_context.r) {\n\t\tthrow new Error('beforeUpdate cannot be used in runes mode');\n\t}\n\n\tinit_update_callbacks(current_component_context).b.push(fn);\n}\n\n/**\n * Schedules a callback to run immediately after the component has been updated.\n *\n * The first time the callback runs will be after the initial `onMount`.\n *\n * In runes mode use `$effect` instead.\n *\n * https://svelte.dev/docs/svelte#afterupdate\n * @deprecated Use `$effect` instead — see https://svelte-5-preview.vercel.app/docs/deprecations#beforeupdate-and-afterupdate\n * @param {() => void} fn\n * @returns {void}\n */\nexport function afterUpdate(fn) {\n\tif (current_component_context === null) {\n\t\tthrow new Error('afterUpdate can only be used during component initialisation.');\n\t}\n\n\tif (current_component_context.r) {\n\t\tthrow new Error('afterUpdate cannot be used in runes mode');\n\t}\n\n\tinit_update_callbacks(current_component_context).a.push(fn);\n}\n\n/**\n * Legacy-mode: Init callbacks object for onMount/beforeUpdate/afterUpdate\n * @param {import('../internal/client/types.js').ComponentContext} context\n */\nfunction init_update_callbacks(context) {\n\treturn (context.u ??= { a: [], b: [], m: [] });\n}\n\n// TODO bring implementations in here\n// (except probably untrack — do we want to expose that, if there's also a rune?)\nexport {\n\tflushSync,\n\tmount,\n\thydrate,\n\ttick,\n\tunmount,\n\tuntrack,\n\tunstate,\n\tcreateRoot,\n\thasContext,\n\tgetContext,\n\tgetAllContexts,\n\tsetContext\n} from '../internal/index.js';\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;AAkBO,SAAS,QAAQ,IAAI;AAC3B,MAAI,8BAA8B,MAAM;AACvC,UAAM,IAAI,MAAM,2DAA2D;AAAA,EAC5E;AAEA,MAAI,0BAA0B,GAAG;AAChC,gBAAY,MAAM;AACjB,YAAM,UAAU,QAAQ,EAAE;AAC1B,UAAI,OAAO,YAAY;AAAY;AAAA;AAAA,UAAkC;AAAA;AAAA,IACtE,CAAC;AAAA,EACF,OAAO;AACN,0BAAsB,yBAAyB,EAAE,EAAE,KAAK,EAAE;AAAA,EAC3D;AACD;AAYO,SAAS,UAAU,IAAI;AAC7B,MAAI,8BAA8B,MAAM;AACvC,UAAM,IAAI,MAAM,6DAA6D;AAAA,EAC9E;AAEA,UAAQ,MAAM,MAAM,QAAQ,EAAE,CAAC;AAChC;AASA,SAAS,oBAAoB,MAAM,QAAQ,EAAE,UAAU,OAAO,aAAa,MAAM,IAAI,CAAC,GAAG;AACxF,SAAO,IAAI,YAAY,MAAM,EAAE,QAAQ,SAAS,WAAW,CAAC;AAC7D;AAyBO,SAAS,wBAAwB;AACvC,QAAM,oBAAoB;AAC1B,MAAI,sBAAsB,MAAM;AAC/B,UAAM,IAAI,MAAM,yEAAyE;AAAA,EAC1F;AAEA,SAAO,CAAC,MAAM,QAAQ,YAAY;AA3FnC;AA4FE,UAAM;AAAA;AAAA,OACL,uBAAkB,EAAE,aAApB;AAAA;AAAA,QACuB;AAAA;AAAA;AAExB,QAAI,QAAQ;AACX,YAAM,YAAY,SAAS,MAAM,IAAI,OAAO,MAAM,IAAI,CAAC,MAAM;AAG7D,YAAM,QAAQ;AAAA;AAAA,QAA2C;AAAA,QAAO;AAAA,QAAQ;AAAA,MAAO;AAC/E,iBAAW,MAAM,WAAW;AAC3B,WAAG,KAAK,kBAAkB,GAAG,KAAK;AAAA,MACnC;AACA,aAAO,CAAC,MAAM;AAAA,IACf;AAEA,WAAO;AAAA,EACR;AACD;AAgBO,SAAS,aAAa,IAAI;AAChC,MAAI,8BAA8B,MAAM;AACvC,UAAM,IAAI,MAAM,+DAA+D;AAAA,EAChF;AAEA,MAAI,0BAA0B,GAAG;AAChC,UAAM,IAAI,MAAM,2CAA2C;AAAA,EAC5D;AAEA,wBAAsB,yBAAyB,EAAE,EAAE,KAAK,EAAE;AAC3D;AAcO,SAAS,YAAY,IAAI;AAC/B,MAAI,8BAA8B,MAAM;AACvC,UAAM,IAAI,MAAM,+DAA+D;AAAA,EAChF;AAEA,MAAI,0BAA0B,GAAG;AAChC,UAAM,IAAI,MAAM,0CAA0C;AAAA,EAC3D;AAEA,wBAAsB,yBAAyB,EAAE,EAAE,KAAK,EAAE;AAC3D;AAMA,SAAS,sBAAsB,SAAS;AACvC,SAAQ,QAAQ,MAAR,QAAQ,IAAM,EAAE,GAAG,CAAC,GAAG,GAAG,CAAC,GAAG,GAAG,CAAC,EAAE;AAC7C;",
  "names": []
}
