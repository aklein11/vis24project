import {
  DOMBooleanAttributes,
  current_component_context,
  disallowed_parapgraph_contents,
  interactive_elements,
  is_tag_valid_with_parent,
  pop,
  push
} from "./chunk-DVZZ2LBH.js";
import {
  DEV
} from "./chunk-IP2U24VQ.js";
import {
  is_promise,
  noop,
  subscribe_to_store
} from "./chunk-LQRLXBZM.js";

// node_modules/svelte/src/internal/server/index.js
var ATTR_REGEX = /[&"]/g;
var CONTENT_REGEX = /[&<]/g;
var INVALID_ATTR_NAME_CHAR_REGEX = /[\s'">/=\u{FDD0}-\u{FDEF}\u{FFFE}\u{FFFF}\u{1FFFE}\u{1FFFF}\u{2FFFE}\u{2FFFF}\u{3FFFE}\u{3FFFF}\u{4FFFE}\u{4FFFF}\u{5FFFE}\u{5FFFF}\u{6FFFE}\u{6FFFF}\u{7FFFE}\u{7FFFF}\u{8FFFE}\u{8FFFF}\u{9FFFE}\u{9FFFF}\u{AFFFE}\u{AFFFF}\u{BFFFE}\u{BFFFF}\u{CFFFE}\u{CFFFF}\u{DFFFE}\u{DFFFF}\u{EFFFE}\u{EFFFF}\u{FFFFE}\u{FFFFF}\u{10FFFE}\u{10FFFF}]/u;
var VoidElements = /* @__PURE__ */ new Set([
  "area",
  "base",
  "br",
  "col",
  "embed",
  "hr",
  "img",
  "input",
  "keygen",
  "link",
  "menuitem",
  "meta",
  "param",
  "source",
  "track",
  "wbr"
]);
var current_element = null;
function create_payload() {
  return { out: "", head: { title: "", out: "", anchor: 0 }, anchor: 0 };
}
function copy_payload(to_copy) {
  return {
    ...to_copy,
    head: { ...to_copy.head }
  };
}
function assign_payload(p1, p2) {
  p1.out = p2.out;
  p1.head = p2.head;
  p1.anchor = p2.anchor;
}
function error_on_client(payload, message) {
  message = `Svelte SSR validation error:

${message}

Ensure your components render valid HTML as the browser will try to repair invalid HTML, which may result in content being shifted around and will likely result in a hydration mismatch.`;
  console.error(message);
  payload.head.out += `<script>console.error(\`${message}\`)<\/script>`;
}
function push_element(tag, payload) {
  if (current_element !== null && !is_tag_valid_with_parent(tag, current_element.tag)) {
    error_on_client(payload, `<${tag}> is invalid inside <${current_element.tag}>`);
  }
  if (interactive_elements.has(tag)) {
    let element2 = current_element;
    while (element2 !== null) {
      if (interactive_elements.has(element2.tag)) {
        error_on_client(payload, `<${tag}> is invalid inside <${element2.tag}>`);
      }
      element2 = element2.parent;
    }
  }
  if (disallowed_parapgraph_contents.includes(tag)) {
    let element2 = current_element;
    while (element2 !== null) {
      if (element2.tag === "p") {
        error_on_client(payload, `<${tag}> is invalid inside <p>`);
      }
      element2 = element2.parent;
    }
  }
  current_element = {
    tag,
    parent: current_element
  };
}
function pop_element() {
  if (current_element !== null) {
    current_element = current_element.parent;
  }
}
function element(payload, tag, attributes_fn, children_fn) {
  payload.out += `<${tag} `;
  attributes_fn();
  payload.out += `>`;
  if (!VoidElements.has(tag)) {
    const anchor = tag !== "textarea" ? create_anchor(payload) : null;
    if (anchor !== null) {
      payload.out += anchor;
    }
    children_fn();
    if (anchor !== null) {
      payload.out += anchor;
    }
    payload.out += `</${tag}>`;
  }
}
var on_destroy = [];
function render(component, options) {
  const payload = create_payload();
  const root_anchor = create_anchor(payload);
  const root_head_anchor = create_anchor(payload.head);
  const prev_on_destroy = on_destroy;
  on_destroy = [];
  payload.out += root_anchor;
  if (options.context) {
    push({});
    current_component_context.c = options.context;
  }
  component(payload, options.props, {}, {});
  if (options.context) {
    pop();
  }
  payload.out += root_anchor;
  for (const cleanup of on_destroy)
    cleanup();
  on_destroy = prev_on_destroy;
  return {
    head: payload.head.out || payload.head.title ? payload.head.title + root_head_anchor + payload.head.out + root_head_anchor : "",
    html: payload.out
  };
}
function push2(runes) {
  push({}, runes);
}
function pop2() {
  pop();
}
function escape(value, is_attr = false) {
  const str = String(value ?? "");
  const pattern = is_attr ? ATTR_REGEX : CONTENT_REGEX;
  pattern.lastIndex = 0;
  let escaped = "";
  let last = 0;
  while (pattern.test(str)) {
    const i = pattern.lastIndex - 1;
    const ch = str[i];
    escaped += str.substring(last, i) + (ch === "&" ? "&amp;" : ch === '"' ? "&quot;" : "&lt;");
    last = i + 1;
  }
  return escaped + str.substring(last);
}
function head(payload, fn) {
  const head_payload = payload.head;
  fn(head_payload);
}
function attr(name, value, boolean) {
  if (value == null || !value && boolean || value === "" && name === "class")
    return "";
  const assignment = boolean ? "" : `="${escape(value, true)}"`;
  return ` ${name}${assignment}`;
}
function css_props(payload, is_html, props, component) {
  const styles = style_object_to_string(props);
  const anchor = create_anchor(payload);
  if (is_html) {
    payload.out += `<div style="display: contents; ${styles}">${anchor}`;
  } else {
    payload.out += `<g style="${styles}">${anchor}`;
  }
  component();
  if (is_html) {
    payload.out += `${anchor}</div>`;
  } else {
    payload.out += `${anchor}</g>`;
  }
}
function spread_attributes(attrs, lowercase_attributes, is_svg, class_hash, additional) {
  const merged_attrs = {};
  let key;
  for (let i = 0; i < attrs.length; i++) {
    const obj = attrs[i];
    for (key in obj) {
      if (typeof obj[key] !== "function") {
        merged_attrs[key] = obj[key];
      }
    }
  }
  const styles = additional == null ? void 0 : additional.styles;
  if (styles) {
    if ("style" in merged_attrs) {
      merged_attrs.style = style_object_to_string(
        merge_styles(
          /** @type {string} */
          merged_attrs.style,
          styles
        )
      );
    } else {
      merged_attrs.style = style_object_to_string(styles);
    }
  }
  if (class_hash) {
    if ("class" in merged_attrs) {
      merged_attrs.class += ` ${class_hash}`;
    } else {
      merged_attrs.class = class_hash;
    }
  }
  const classes = additional == null ? void 0 : additional.classes;
  if (classes) {
    if ("class" in merged_attrs) {
      merged_attrs.class += ` ${classes}`;
    } else {
      merged_attrs.class = classes;
    }
  }
  let attr_str = "";
  let name;
  for (name in merged_attrs) {
    if (INVALID_ATTR_NAME_CHAR_REGEX.test(name))
      continue;
    if (lowercase_attributes) {
      name = name.toLowerCase();
    }
    const is_boolean = !is_svg && DOMBooleanAttributes.includes(name);
    attr_str += attr(name, merged_attrs[name], is_boolean);
  }
  return attr_str;
}
function spread_props(props) {
  const merged_props = {};
  let key;
  for (let i = 0; i < props.length; i++) {
    const obj = props[i];
    for (key in obj) {
      merged_props[key] = obj[key];
    }
  }
  return merged_props;
}
function stringify(value) {
  return typeof value === "string" ? value : value == null ? "" : value + "";
}
function style_object_to_string(style_object) {
  return Object.keys(style_object).filter(
    /** @param {any} key */
    (key) => style_object[key]
  ).map(
    /** @param {any} key */
    (key) => `${key}: ${escape(style_object[key], true)};`
  ).join(" ");
}
function add_styles(style_object) {
  const styles = style_object_to_string(style_object);
  return styles ? ` style="${styles}"` : "";
}
function merge_styles(style_attribute, style_directive) {
  const style_object = {};
  for (const individual_style of style_attribute.split(";")) {
    const colon_index = individual_style.indexOf(":");
    const name = individual_style.slice(0, colon_index).trim();
    const value = individual_style.slice(colon_index + 1).trim();
    if (!name)
      continue;
    style_object[name] = value;
  }
  for (const name in style_directive) {
    const value = style_directive[name];
    if (value) {
      style_object[name] = value;
    } else {
      delete style_object[name];
    }
  }
  return style_object;
}
function store_get(store_values, store_name, store) {
  var _a;
  if (DEV) {
    validate_store(store, store_name.slice(1));
  }
  if (store_name in store_values && store_values[store_name][0] === store) {
    return store_values[store_name][2];
  }
  (_a = store_values[store_name]) == null ? void 0 : _a[1]();
  store_values[store_name] = [store, null, void 0];
  const unsub = subscribe_to_store(
    store,
    /** @param {any} v */
    (v) => store_values[store_name][2] = v
  );
  store_values[store_name][1] = unsub;
  return store_values[store_name][2];
}
function validate_store(store, name) {
  if (store != null && typeof store.subscribe !== "function") {
    throw new Error(`'${name}' is not a store with a 'subscribe' method`);
  }
}
function store_set(store, value) {
  store.set(value);
  return value;
}
function mutate_store(store_values, store_name, store, expression) {
  store_set(store, store_get(store_values, store_name, store));
  return expression;
}
function update_store(store_values, store_name, store, d = 1) {
  let store_value = store_get(store_values, store_name, store);
  store.set(store_value + d);
  return store_value;
}
function update_store_pre(store_values, store_name, store, d = 1) {
  const value = store_get(store_values, store_name, store) + d;
  store.set(value);
  return value;
}
function unsubscribe_stores(store_values) {
  for (const store_name in store_values) {
    store_values[store_name][1]();
  }
}
function value_or_fallback(value, fallback) {
  return value === void 0 ? fallback : value;
}
function slot(payload, slot_fn, slot_props, fallback_fn) {
  if (slot_fn === void 0) {
    if (fallback_fn !== null) {
      fallback_fn();
    }
  } else {
    slot_fn(payload, slot_props);
  }
}
function rest_props(props, rest) {
  const rest_props2 = {};
  let key;
  for (key in props) {
    if (!rest.includes(key)) {
      rest_props2[key] = props[key];
    }
  }
  return rest_props2;
}
function sanitize_props(props) {
  const { children, $$slots, ...sanitized } = props;
  return sanitized;
}
function sanitize_slots(props) {
  const sanitized = { ...props.$$slots };
  if (props.children)
    sanitized.default = props.children;
  return sanitized;
}
function bind_props(props_parent, props_now) {
  var _a;
  for (const key in props_now) {
    const initial_value = props_parent[key];
    const value = props_now[key];
    if (initial_value === void 0 && value !== void 0 && ((_a = Object.getOwnPropertyDescriptor(props_parent, key)) == null ? void 0 : _a.set)) {
      props_parent[key] = value;
    }
  }
}
function await_block(promise, pending_fn, then_fn) {
  if (is_promise(promise)) {
    promise.then(null, noop);
    if (pending_fn !== null) {
      pending_fn();
    }
  } else if (then_fn !== null) {
    then_fn(promise);
  }
}
function ensure_array_like(array_like_or_iterator) {
  return (array_like_or_iterator == null ? void 0 : array_like_or_iterator.length) !== void 0 ? array_like_or_iterator : Array.from(array_like_or_iterator);
}
function create_anchor(payload) {
  const depth = payload.anchor++;
  return `<!--ssr:${depth}-->`;
}
function selector() {
  return [() => false, noop];
}
function loop_guard(timeout) {
  const start = Date.now();
  return () => {
    if (Date.now() - start > timeout) {
      throw new Error("Infinite loop detected");
    }
  };
}
function inspect(args, inspect2 = console.log) {
  inspect2("init", ...args);
}

export {
  VoidElements,
  copy_payload,
  assign_payload,
  push_element,
  pop_element,
  element,
  on_destroy,
  render,
  push2 as push,
  pop2 as pop,
  escape,
  head,
  attr,
  css_props,
  spread_attributes,
  spread_props,
  stringify,
  add_styles,
  merge_styles,
  store_get,
  validate_store,
  store_set,
  mutate_store,
  update_store,
  update_store_pre,
  unsubscribe_stores,
  value_or_fallback,
  slot,
  rest_props,
  sanitize_props,
  sanitize_slots,
  bind_props,
  await_block,
  ensure_array_like,
  create_anchor,
  selector,
  loop_guard,
  inspect
};
//# sourceMappingURL=chunk-XPP2VVHW.js.map
